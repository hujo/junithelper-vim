let s:expect = themis#helper('expect')
let s:junithelper_home = g:junithelper_home
let s:cwd = ''

function! s:Call(fname, ...)
  return call(junithelper#sid(a:fname), a:000)
endfunction

Describe OpenFile
  Before each
    let s:cwd = getcwd()
  End
  After each
    bw
    lcd `=s:cwd`
  End
  Context s:isTestFile
    It given MainTest.java then return 1
      call s:expect(1).to_equal(s:Call('isTestFile', 'MainTest.java'))
    End
    It given MainTestHelper.java then return 0
      call s:expect(0).to_equal(s:Call('isTestFile', 'MainTestHelper.java'))
    End
  End

  Context s:escapedFnameWithCmd given fileName not empty String
    Context given (make, MainTest.java)
      It MainTest.java not exists then return ''
        let fname = 'MainTest.java'
        call s:expect('').to_equal(s:Call('escapedFnameWithCmd', 'make', fname))
      End
      It MainTest.java exists then return ''
        let dir = glob(g:JUNITHELPER_JAVASRCDIR . '/test/java')
        call s:expect('').not.to_equal(dir)

        lcd `=dir`
        let fname = glob('MainTest.java')
        call s:expect('').not.to_equal(fname)

        call s:expect('').to_equal(s:Call('escapedFnameWithCmd', 'make', fname))
      End
    End
    Context given (make, Main.java)
      It Main.java not exists then return ''
        let fname = 'Main.java'
        call s:expect('').to_equal(s:Call('escapedFnameWithCmd', 'make', fname))
      End
      It Main.java exists then return 'make ' . shellescape(fileName)
        let dir = glob(g:JUNITHELPER_JAVASRCDIR . '/main/java')
        call s:expect('').not.to_equal(dir)

        lcd `=dir`
        let fname = glob('Main.java')
        call s:expect('').not.to_equal(fname)

        let expected = 'make ' . shellescape(fname)
        let actual = s:Call('escapedFnameWithCmd', 'make', fname)
        call s:expect(expected).to_equal(actual)
      End
    End
  End
End
